import dash,os,flask
from dash import dcc,dash_table,html,callback
from dash.dependencies import Input, Output, State, ALL
import dash_bootstrap_components as dbc
from dash.exceptions import PreventUpdate
import pandas as pd
import gunicorn   
import plotly.graph_objects as go
dash.register_page(__name__,name='Utilisation des numeros de prix')

from google.cloud import bigquery
client = bigquery.Client()   
query = "SELECT * from `sucombe.prestaProduit.prix-2024` limit 5000"
rows=client.query(query).result()
rowsTab=[list(row) for row in rows]
df=pd.DataFrame(rowsTab)
df.columns=[item.name for item in rows.schema]
listMarches=sorted(df['Marche'].unique())
listPrix={march: list(df[df['Marche']==march].groupby('Designation')['Montant'].sum()
          .sort_values(ascending=False).index) for march in listMarches}

def generate_t(march,desc):
    dfm=df[(df['Marche']==march)&(df['Designation']==desc)]
    dfm=dfm[['date',  'Lieu', 'Montant','Libelle_PRESTA','type' ]]
    dfm=dfm.sort_values(['date','Lieu'])[-30:]

    return  dbc.Row(  dash_table.DataTable(
    data=dfm.to_dict('records'),
    columns=[{'id': c, 'name': c} for c in dfm.columns],
        style_data={   'whiteSpace': 'normal',   'height': 'auto',   
        'width': '70px',   'maxWidth': '120px', 'minWidth': '30px' },
    style_cell_conditional=[
        { 'if': {'column_id': 'Libelle_PRESTA'},   'minWidth': '250px' },
    ]
    ))

layout = html.Div([
        html.H5("Utilisation des numéros de prix en 2024",
        style={'text-align': 'center'}),
        html.P(""" Choisir un marché et un numéro de prix, pour voir les dernières prestations saisies dans Sucombe.""",
         style={'marginLeft': 90,'marginRight': 150, 'marginTop': 0}),        
        dbc.Row([
            dbc.Col( ' ' , width=1),
            dbc.Col(dcc.Dropdown(
            id='march-dropdown',
            options=[{'label': k, 'value': k} for k in listMarches],
            value='AEV',
            style={'margin':0,'padding':0}
            ), width=2),  
        #    dbc.Col(html.Label('Prix :', style={'text-align': 'right'}), width=1),
            dbc.Col(dcc.Dropdown(
            id='prix-dropdown',
            options=listPrix['AEV'],
            value=listPrix['AEV'][0]
            ), width=8),        
        ]),    

        html.Hr(),
        dbc.Row(id='display-prix', children=[generate_t('AEV','PCTT Ouest')]),
        html.Hr(),
        dcc.Store(id='listPrix')
])

@callback( Output('prix-dropdown', 'options'),
    Input('march-dropdown', 'value'),prevent_initial_callbacks=True)
def list_prix(march):
    return listPrix[march]


@callback( Output('display-prix', 'children'),
    Input('march-dropdown', 'value'),Input('prix-dropdown', 'value'),prevent_initial_callbacks=True)
def met_a_jour(march,prix):
    return html.Div(children=[generate_t(march,prix)])

if __name__ == '__main__':
   app.run_server(debug=True)
